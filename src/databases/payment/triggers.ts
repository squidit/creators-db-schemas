
import { sql } from 'drizzle-orm'
import { transactions, transactionsHistory } from './schema'

export const transactionsBeforeInsertTrigger = () => (sql`
    CREATE TRIGGER payment.transactions_BEFORE_INSERT
    BEFORE INSERT ON payment.${transactions._.name}
    FOR EACH ROW 
    INSERT INTO payment.${transactionsHistory._.name} (
        ${transactionsHistory.transactionId.name},
        ${transactionsHistory.transactionDate.name},
        ${transactionsHistory.createdAt.name},
        ${transactionsHistory.updatedAt.name},
        ${transactionsHistory.dueDate.name},
        ${transactionsHistory.transactionStatus.name},
        ${transactionsHistory.currency.name},
        ${transactionsHistory.batchId.name},
        ${transactionsHistory.batchName.name},
        ${transactionsHistory.amount.name},
        ${transactionsHistory.inOrOut.name},
        ${transactionsHistory.deletedAt.name},
        ${transactionsHistory.paymentGatewayTransactionId.name},
        ${transactionsHistory.netValue.name},
        ${transactionsHistory.grossValue.name},
        ${transactionsHistory.inssAliquot.name},
        ${transactionsHistory.inssValue.name},
        ${transactionsHistory.irAliquot.name},
        ${transactionsHistory.irDeduct.name},
        ${transactionsHistory.irValue.name},
        ${transactionsHistory.squidId.name},
        ${transactionsHistory.nfId.name},
        ${transactionsHistory.transactionStatusDetail.name},
        ${transactionsHistory.issAliquot.name},
        ${transactionsHistory.issValue.name},
        ${transactionsHistory.paidedAt.name},
        ${transactionsHistory.transactionErrorDetail.name},
        ${transactionsHistory.paymentType.name},
        ${transactionsHistory.withdrawingDate.name},
        ${transactionsHistory.anticipationAliquot.name},
        ${transactionsHistory.anticipationValue.name},
        ${transactionsHistory.anticipationContractAccepted.name},
        ${transactionsHistory.createdById.name},
        ${transactionsHistory.createdByEmail.name}
    ) VALUES (
        NEW.transactionId,
        NEW.transactionDate,
        NOW(),
        NEW.updatedAt,
        NEW.dueDate,
        NEW.transactionStatus,
        NEW.currency,
        NEW.batchId,
        NEW.batchName,
        NEW.amount,
        NEW.inOrOut,
        NEW.deletedAt,
        NEW.paymentGatewayTransactionId,
        NEW.netValue,
        NEW.grossValue,
        NEW.inssAliquot,
        NEW.inssValue,
        NEW.irAliquot,
        NEW.irDeduct,
        NEW.irValue,
        NEW.squidId,
        NEW.nfId,
        NEW.transactionStatusDetail,
        NEW.issAliquot,
        NEW.issValue,
        NEW.paidedAt,
        NEW.transactionErrorDetail,
        NEW.paymentType, 
        NEW.withdrawingDate, 
        NEW.anticipationAliquot,
        NEW.anticipationValue,
        NEW.anticipationContractAccepted,
        NEW.createdById,
        NEW.createdByEmail
    )
`)

export const transactionsBeforeUpdateTrigger = () => (sql`
    CREATE TRIGGER payment.transactions_BEFORE_UPDATE
    BEFORE UPDATE ON payment.${transactions._.name}
    FOR EACH ROW 
    INSERT INTO payment.${transactionsHistory._.name} (
        ${transactionsHistory.transactionId.name},
        ${transactionsHistory.transactionDate.name},
        ${transactionsHistory.createdAt.name},
        ${transactionsHistory.updatedAt.name},
        ${transactionsHistory.dueDate.name},
        ${transactionsHistory.transactionStatus.name},
        ${transactionsHistory.currency.name},
        ${transactionsHistory.batchId.name},
        ${transactionsHistory.batchName.name},
        ${transactionsHistory.amount.name},
        ${transactionsHistory.inOrOut.name},
        ${transactionsHistory.deletedAt.name},
        ${transactionsHistory.paymentGatewayTransactionId.name},
        ${transactionsHistory.netValue.name},
        ${transactionsHistory.grossValue.name},
        ${transactionsHistory.inssAliquot.name},
        ${transactionsHistory.inssValue.name},
        ${transactionsHistory.irAliquot.name},
        ${transactionsHistory.irDeduct.name},
        ${transactionsHistory.irValue.name},
        ${transactionsHistory.squidId.name},
        ${transactionsHistory.nfId.name},
        ${transactionsHistory.transactionStatusDetail.name},
        ${transactionsHistory.issAliquot.name},
        ${transactionsHistory.issValue.name},
        ${transactionsHistory.paidedAt.name},
        ${transactionsHistory.transactionErrorDetail.name},
        ${transactionsHistory.paymentType.name},
        ${transactionsHistory.withdrawingDate.name},
        ${transactionsHistory.anticipationAliquot.name},
        ${transactionsHistory.anticipationValue.name},
        ${transactionsHistory.anticipationContractAccepted.name},
        ${transactionsHistory.createdById.name},
        ${transactionsHistory.createdByEmail.name}
    ) VALUES (
        NEW.transactionId,
        NEW.transactionDate,
        NOW(),
        NEW.updatedAt,
        NEW.dueDate,
        NEW.transactionStatus,
        NEW.currency,
        NEW.batchId,
        NEW.batchName,
        NEW.amount,
        NEW.inOrOut,
        NEW.deletedAt,
        NEW.paymentGatewayTransactionId,
        NEW.netValue,
        NEW.grossValue,
        NEW.inssAliquot,
        NEW.inssValue,
        NEW.irAliquot,
        NEW.irDeduct,
        NEW.irValue,
        NEW.squidId,
        NEW.nfId,
        NEW.transactionStatusDetail,
        NEW.issAliquot,
        NEW.issValue,
        NEW.paidedAt,
        NEW.transactionErrorDetail,
        NEW.paymentType, 
        NEW.withdrawingDate, 
        NEW.anticipationAliquot,
        NEW.anticipationValue,
        NEW.anticipationContractAccepted,
        NEW.updatedById,
        NEW.updatedByEmail
    )
`)